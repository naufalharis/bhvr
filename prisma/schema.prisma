// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}
//comment//
datasource db {
  provider = "postgresql" // ganti sesuai DB kamu
  url      = env("DATABASE_URL")
}
//nopal//
// ENUM
enum CourseType {
  single
  bundle
}

enum ContentType {
  video
  slide
  download
}

// ======================
// MODELS
// ======================

model User {
  id            Int       @id @default(autoincrement())
  first_name    String
  last_name     String?
  gender        String?
  mobile_number String?
  birth_date    DateTime?
  birth_place   String?
  username      String    @unique
  email         String    @unique
  password      String
  role          String

  affiliates  Affiliate[]
  instructors Instructor[]
  enrolled    EnrolledCourse[]
  orders      Order[]
  notes       CourseNote[] // relasi balik ke CourseNote
}

model Affiliate {
  id              Int      @id @default(autoincrement())
  user_id         Int
  registered_date DateTime @default(now())
  unique_code     String   @unique
  status          String

  user    User                @relation(fields: [user_id], references: [id])
  courses AffiliatesCourses[]
}

model AffiliatesCourses {
  id              Int      @id @default(autoincrement())
  affiliate_id    Int
  course_id       Int
  registered_date DateTime @default(now())

  affiliate Affiliate @relation(fields: [affiliate_id], references: [id])
  course    Course    @relation(fields: [course_id], references: [id])
}

model Instructor {
  id              Int      @id @default(autoincrement())
  user_id         Int
  registered_date DateTime @default(now())
  status          String

  user    User     @relation(fields: [user_id], references: [id])
  courses Course[]
}

model Course {
  id            Int        @id @default(autoincrement())
  instructor_id Int
  title         String
  overview      String?
  cover         String?
  course_type   CourseType
  slug          String     @unique

  instructor     Instructor          @relation(fields: [instructor_id], references: [id])
  categories     CoursesCategories[]
  chapters       CourseChapter[]
  enrolled       EnrolledCourse[]
  orderLines     OrderLine[]
  productDetails ProductDetail[] // satu course bisa punya banyak detail produk
  affiliates     AffiliatesCourses[]
}

model CoursesCategories {
  id          Int @id @default(autoincrement())
  course_id   Int
  category_id Int

  course   Course   @relation(fields: [course_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])
}

model Category {
  id        Int    @id @default(autoincrement())
  parent_id Int?
  title     String

  parent   Category?           @relation("CategoryChildren", fields: [parent_id], references: [id])
  children Category[]          @relation("CategoryChildren")
  courses  CoursesCategories[]
}

model CourseChapter {
  id         Int     @id @default(autoincrement())
  course_id  Int
  title      String
  overview   String?
  cover      String?
  sort_order Int?

  course   Course                 @relation(fields: [course_id], references: [id])
  contents CourseChapterContent[]
}

model CourseChapterContent {
  id                 Int         @id @default(autoincrement())
  chapter_id         Int
  title              String
  overview           String?
  cover              String?
  content_type       ContentType
  sort_order         Int?
  path               String?
  original_file_name String?

  chapter CourseChapter @relation(fields: [chapter_id], references: [id])
  notes   CourseNote[]
}

model EnrolledCourse {
  id            Int      @id @default(autoincrement())
  user_id       Int
  course_id     Int
  order_id      Int?
  bundle_id     Int?
  enrolled_date DateTime @default(now())
  order         String?

  user     User         @relation(fields: [user_id], references: [id])
  course   Course       @relation(fields: [course_id], references: [id])
  orderRef Order?       @relation(fields: [order_id], references: [id])
  notes    CourseNote[]
}

model CourseNote {
  id                       Int     @id @default(autoincrement())
  enrolled_course_id       Int
  course_content_detail_id Int
  user_id                  Int // relasi ke User
  note                     String?

  enrolledCourse EnrolledCourse       @relation(fields: [enrolled_course_id], references: [id])
  content        CourseChapterContent @relation(fields: [course_content_detail_id], references: [id])
  user           User                 @relation(fields: [user_id], references: [id])
}

model Order {
  id         Int      @id @default(autoincrement())
  user_id    Int
  order_date DateTime @default(now())
  status     String

  user     User             @relation(fields: [user_id], references: [id])
  payments OrderPayment[]
  lines    OrderLine[]
  enrolled EnrolledCourse[]
}

model OrderLine {
  id         Int    @id @default(autoincrement())
  order_id   Int
  product_id Int
  course_id  Int?
  status     String

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
  course  Course? @relation(fields: [course_id], references: [id])
}

model OrderPayment {
  id               Int      @id @default(autoincrement())
  order_id         Int
  payment_date     DateTime @default(now())
  method           String
  status           String
  reference_number String?

  order Order @relation(fields: [order_id], references: [id])
}

model Product {
  id           Int     @id @default(autoincrement())
  title        String
  overview     String?
  cover        String?
  product_type String
  price        Float

  orderLines OrderLine[]
  details    ProductDetail[]
}

model ProductDetail {
  id         Int   @id @default(autoincrement())
  course_id  Int
  product_id Int?
  price      Float

  course  Course   @relation(fields: [course_id], references: [id])
  product Product? @relation(fields: [product_id], references: [id])
}

model Page {
  id      Int     @id @default(autoincrement())
  title   String
  content String?
  is_main Boolean @default(false)
  slug    String  @unique
}
